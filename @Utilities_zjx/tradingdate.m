function dDatesOut = tradingdate(dToday,nLags,varargin)
% tradingdate用于获取交易日信息。
% 【注意】 务必按照国务院公布的放假安排在子函数 notradingdates 中添加
%          新一年的非交易日日期。目前更新到2016年。
% 
% 输入：
%       dToday:     输入日期,matlab整数型日期
%       nLags:      偏移量,  正整数或负整数，用于向前或向后调整交易日。
%       varargin:   可变输入，主要用于控制是否输出一列交易日。
% 
% 输出：
%       dDatesOut：交易日
% 
% 例子：
%      dLastTradingDate = Utilities_zjx.tradingdate(today,-1); 
%               返回today以前的最近一个交易日。
%      dClosestTradingDate = Utilities_zjx.tradingdate(today,0);
%               如果today是交易日则返回today,否则返回today最近的前交易日。
%      dNextTradingDate = Utilities_zjx.tradingdate(today,1);
%               返回today以后的下一个交易日。
%      dDates = Utilities_zjx.tradingdate(1,1,'start','2016-01-01','end','2016-06-30');
%               获取2016年1月1日到6月30日之间的所有交易日
%      dDates = Utilities_zjx.tradingdate([],0,'start',735965,'end',736330);
%               获取735965到736330之间的所有交易日
%      dDates = Utilities_zjx.tradingdate([],nan,'start',735965);
%               获取735965到今天之间的所有交易日
% 逻辑：
%      记录节假日。生成自然日序列，然后排除节假日和周末。获得交易日再进行相关处理。
%
% - by Lary 2016.06.06
%      Lary 2017.01.03 update: 增加2017年节假日。

if nargin==0
    dToday = today;
    nLags = 0;
elseif nargin == 1
    nLags = 0;
end

if isempty(dToday)
    dToday = today;
end

if isempty(nLags)
    nLags = 0;
end

if isa(dToday,'char')
    dToday = datenum(dToday);
end
dToday = fix(dToday);
nLags = fix(nLags);

bStart = any(strcmpi(varargin,'start'));
bEnd = any(strcmpi(varargin,'end'));

if bStart
    dStart = varargin{find(strcmpi(varargin,'start'))+1};
    if isa(dStart,'char')
        dStart = datenum(dStart);
    end
else
    dStart = dToday - max(20,2*abs(nLags));
end

if bEnd
    dEnd = varargin{find(strcmpi(varargin,'end'))+1};
    if isa(dEnd,'char')
        dEnd = datenum(dEnd);
    end
elseif bStart
    dEnd = today; % 如果只提供开始日期，则默认结束日期为今天。
else
    dEnd = dToday + max(20,2*abs(nLags));
end


dDates = (dStart:dEnd)';
dHolidays = notradingdates(); 
dDatesOut = setdiff(dDates,dHolidays);
dDatesOut = dDatesOut(weekday(dDatesOut)~=7 & weekday(dDatesOut)~=1);
if ~bStart && ~bEnd
    try
        [tpixToday,bFound] = Utilities_zjx.bisearch(dToday,dDatesOut);
        if ~bFound
            dDatesOut = dDatesOut(tpixToday+nLags-double(nLags>=0)); 
            % 如果输入一个非交易日，则lag=0和lag=-1的输出都是该日之前的
            % 最后一个交易日。lag=1为该日的下一交易日。所以逻辑为：如果
            % lag>=0，则输出结果回退一日。也就是上式中的-double(nLags>=0)部分。
        else
            dDatesOut = dDatesOut(tpixToday+nLags);
        end
    catch
        warning('没有找到符合要求的日期。\n')
        dDatesOut = [];
    end
end

end

function dHolidays = notradingdates()
% 本函数返回手动维护的节假日（排除周末）列表。包含2000年至2017年内中
% 国的所有节假日日期。需要每年手动维护。
% - by Lary 2016.06.06
dHolidays = [730488
      730516
      730517
      730518
      730519
      730520
      730523
      730524
      730525
      730526
      730527
      730607
      730608
      730609
      730610
      730611
      730761
      730762
      730763
      730764
      730765
      730852
      730873
      730874
      730875
      730876
      730877
      730880
      730881
      730882
      730883
      730884
      730972
      730973
      730974
      730975
      730978
      731125
      731126
      731127
      731128
      731129
      731217
      731218
      731219
      731258
      731259
      731260
      731261
      731262
      731265
      731266
      731267
      731268
      731269
      731337
      731338
      731339
      731342
      731343
      731489
      731490
      731491
      731492
      731493
      731496
      731582
      731611
      731612
      731615
      731616
      731617
      731618
      731619
      731702
      731703
      731706
      731707
      731708
      731709
      731710
      731855
      731856
      731857
      731860
      731861
      731947
      731965
      731966
      731967
      731968
      731969
      731972
      731973
      731974
      732070
      732071
      732072
      732073
      732074
      732221
      732224
      732225
      732226
      732227
      732315
      732350
      732351
      732352
      732353
      732354
      732357
      732358
      732434
      732435
      732436
      732437
      732438
      732588
      732589
      732590
      732591
      732592
      732679
      732680
      732707
      732708
      732709
      732710
      732711
      732798
      732799
      732800
      732801
      732802
      732952
      732953
      732954
      732955
      732956
      733043
      733044
      733045
      733092
      733093
      733094
      733095
      733096
      733163
      733164
      733165
      733166
      733169
      733316
      733317
      733318
      733319
      733320
      733407
      733408
      733444
      733445
      733446
      733449
      733450
      733502
      733529
      733530
      733568
      733666
      733680
      733681
      733682
      733683
      733684
      733774
      733775
      733799
      733800
      733801
      733802
      733803
      733869
      733894
      733921
      733922
      734047
      734048
      734051
      734052
      734053
      734054
      734139
      734184
      734185
      734186
      734187
      734188
      734233
      734261
      734303
      734304
      734305
      734403
      734404
      734405
      734412
      734415
      734416
      734417
      734418
      734506
      734536
      734537
      734538
      734541
      734542
      734597
      734598
      734625
      734660
      734758
      734779
      734780
      734781
      734782
      734783
      734870
      734871
      734891
      734892
      734893
      734894
      734895
      734961
      734962
      734963
      734989
      734990
      735042
      735143
      735144
      735145
      735146
      735147
      735235
      735236
      735237
      735276
      735277
      735278
      735279
      735280
      735328
      735329
      735353
      735354
      735355
      735395
      735396
      735397
      735496
      735497
      735508
      735509
      735510
      735511
      735514
      735600
      735630
      735633
      735634
      735635
      735636
      735696
      735720
      735721
      735752
      735850
      735873
      735874
      735875
      735878
      735879
      735965
      735966
      736013
      736014
      736015
      736018
      736019
      736060
      736085
      736137
      736210
      736211
      736238
      736239
      736242
      736243
      736244
      736330
      736368
      736369
      736370
      736371
      736372
      736424
      736452
      736490
      736491
      736588
      736589
      736606
      736607
      736608
      736609
      736610 % 截止2016年
      736697
      736722
      736725
      736726
      736727
      736728
      736788
      736789
      736816
      736844
      736845
      736970
      736971
      736972
      736973
      736974
      737059
      737060
      737061
      737110
      737111
      737112
      737106
      737107
      737155
      737156
      737180
      737181]; % 手动增加非交易日
end